var searchModuleIndex = ["vgura",];
var searchIndex = ["ParseError","new_parse_error","DuplicatedVariableError","new_duplicated_variable_error","InvalidIndentationError","new_invalid_indentation_error","VariableNotDefinedError","new_variable_not_defined_error","GuraParser","encode","get_text_with_imports","get_var_name","get_var_value","match_rule","maybe_match","parse","parse","encode","Parser","is_end","split_char_ranges","char","maybe_char","keyword","maybe_keyword","Any","str_with_indentation","Null","str","RuleResult","Rule","MatchResultType","new_match_result_with_value","new_match_result","MatchResult","str",];
var searchModuleData = [["<div align=\"center\">","vgura.html"],];
var searchData = [["vgura","","vgura.html#ParseError","struct "],["vgura","","vgura.html#new_parse_error","fn "],["vgura","","vgura.html#DuplicatedVariableError","struct "],["vgura","","vgura.html#new_duplicated_variable_error","fn "],["vgura","","vgura.html#InvalidIndentationError","struct "],["vgura","","vgura.html#new_invalid_indentation_error","fn "],["vgura","","vgura.html#VariableNotDefinedError","struct "],["vgura","","vgura.html#new_variable_not_defined_error","fn "],["vgura","","vgura.html#GuraParser","struct "],["vgura"," encode generates a gura string from a dictionary ","vgura.html#GuraParser.encode","fn (GuraParser)"],["vgura"," get_text_with_imports gets final text taking in consideration imports in origin","vgura.html#GuraParser.get_text_with_imports","fn (GuraParser)"],["vgura"," get_var_name gets a variable name ","vgura.html#GuraParser.get_var_name","fn (GuraParser)"],["vgura"," get_var_value gets a variable value for a specific key from defined variables i","vgura.html#GuraParser.get_var_value","fn (GuraParser)"],["vgura","","vgura.html#GuraParser.match_rule","fn (GuraParser)"],["vgura"," maybe_match like match_rule but returns none instead of ParseError ","vgura.html#GuraParser.maybe_match","fn (GuraParser)"],["vgura"," parse parses a text in gura format and returns a dict with all the parsed value","vgura.html#GuraParser.parse","fn (GuraParser)"],["vgura"," parse parses a text in Gura format ","vgura.html#parse","fn "],["vgura"," encode generates a Gura string from a dictionary ","vgura.html#encode","fn "],["vgura"," Base parser ","vgura.html#Parser","struct "],["vgura"," is_end returns if the parser has reached the end of file ","vgura.html#Parser.is_end","fn (Parser)"],["vgura"," split_char_ranges returns a list of chars from a list of chars which could cont","vgura.html#Parser.split_char_ranges","fn (Parser)"],["vgura"," char matches a list of specific chars and returns the first that matched ","vgura.html#Parser.char","fn (Parser)"],["vgura"," maybe_char like char but returns none instead of ParseError ","vgura.html#Parser.maybe_char","fn (Parser)"],["vgura"," keyword matches specific keywords ","vgura.html#Parser.keyword","fn (Parser)"],["vgura"," maybe_keyword like keyword but returns none instead of ParseError ","vgura.html#Parser.maybe_keyword","fn (Parser)"],["vgura"," `Any` is a sum type that lists the possible types to be decoded and used. ","vgura.html#Any","type "],["vgura","","vgura.html#Any.str_with_indentation","fn (Any)"],["vgura"," `Null` struct is a simple representation of the `null` value in GURA. ","vgura.html#Null","struct "],["vgura","","vgura.html#Null.str","fn (Null)"],["vgura"," RuleResult defines the return type for GuraParser.match_rule ","vgura.html#RuleResult","type "],["vgura","","vgura.html#Rule","type "],["vgura"," MatchResultType ","vgura.html#MatchResultType","enum "],["vgura"," new_match_result_with_value returns a result with value ","vgura.html#new_match_result_with_value","fn "],["vgura"," new_match_result returns a result without value ","vgura.html#new_match_result","fn "],["vgura","","vgura.html#MatchResult","type "],["vgura","","vgura.html#MatchResult.str","fn (MatchResult)"],];
